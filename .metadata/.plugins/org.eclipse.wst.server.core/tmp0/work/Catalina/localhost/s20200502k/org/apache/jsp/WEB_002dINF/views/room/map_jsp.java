/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2020-06-03 02:54:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.room;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>기초 : 그냥 지도만 생성해 보기</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<header>\r\n");
      out.write("\t<div id=\"map\"width:1000px; margin-top:40px; height:500px;\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=9pb7eu6jme\"></script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("#map {\r\n");
      out.write("\theight: 830px;\r\n");
      out.write("\twidth: 1820px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".c {\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("\tbottom: 30px;\r\n");
      out.write("\tleft: 500px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar HOME_PATH = window.HOME_PATH || '.';\r\n");
      out.write("\r\n");
      out.write("\tvar map = new naver.maps.Map(document.getElementById('map'), {\r\n");
      out.write("\t\tzoom : 16,\r\n");
      out.write("\t\tcenter : new naver.maps.LatLng(37.498294, 127.028861)\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tvar latlngs = [ new naver.maps.LatLng(37.497646, 127.028789),\r\n");
      out.write("\t\t\tnew naver.maps.LatLng(37.498123, 127.025339),\r\n");
      out.write("\t\t\tnew naver.maps.LatLng(37.499721, 127.029997),\r\n");
      out.write("\t\t\tnew naver.maps.LatLng(37.498114, 127.023910), ];\r\n");
      out.write("\r\n");
      out.write("\tvar markerList = [];\r\n");
      out.write("\r\n");
      out.write("\tfor (var i = 0, ii = latlngs.length; i < ii; i++) {\r\n");
      out.write("\t\tvar icon = {\r\n");
      out.write("\t\t\turl : HOME_PATH + '--',\r\n");
      out.write("\t\t\tsize : new naver.maps.Size(24, 37),\r\n");
      out.write("\t\t\tanchor : new naver.maps.Point(12, 37),\r\n");
      out.write("\t\t\torigin : new naver.maps.Point(i * 29, 0)\r\n");
      out.write("\t\t}, marker = new naver.maps.Marker({\r\n");
      out.write("\t\t\tposition : latlngs[i],\r\n");
      out.write("\t\t\tmap : map,\r\n");
      out.write("\t\t\ticon : icon\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tmarker.set('seq', i);\r\n");
      out.write("\r\n");
      out.write("\t\tmarkerList.push(marker);\r\n");
      out.write("\r\n");
      out.write("\t\tmarker.addListener('mouseover', onMouseOver);\r\n");
      out.write("\t\tmarker.addListener('mouseout', onMouseOut);\r\n");
      out.write("\r\n");
      out.write("\t\ticon = null;\r\n");
      out.write("\t\tmarker = null;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction onMouseOver(e) {\r\n");
      out.write("\t\tvar marker = e.overlay, seq = marker.get('seq');\r\n");
      out.write("\r\n");
      out.write("\t\tmarker.setIcon({\r\n");
      out.write("\t\t\turl : HOME_PATH + '--',\r\n");
      out.write("\t\t\tsize : new naver.maps.Size(24, 37),\r\n");
      out.write("\t\t\tanchor : new naver.maps.Point(12, 37),\r\n");
      out.write("\t\t\torigin : new naver.maps.Point(seq * 29, 50)\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction onMouseOut(e) {\r\n");
      out.write("\t\tvar marker = e.overlay, seq = marker.get('seq');\r\n");
      out.write("\r\n");
      out.write("\t\tmarker.setIcon({\r\n");
      out.write("\t\t\turl : HOME_PATH + '--',\r\n");
      out.write("\t\t\tsize : new naver.maps.Size(24, 37),\r\n");
      out.write("\t\t\tanchor : new naver.maps.Point(12, 37),\r\n");
      out.write("\t\t\torigin : new naver.maps.Point(seq * 29, 0)\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
